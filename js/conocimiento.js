// Generated by CoffeeScript 1.6.1
var Pregunta;

Pregunta = (function() {

	function Pregunta(id, tipo, correcto, pregunta, respuestas) {
		this.id = id;
		this.tipo = tipo;
		this.correcto = correcto;
		this.pregunta = pregunta;
		this.respuestas = respuestas;
	}

	Pregunta.prototype.mostrar = function() {
		var respuesta, _i, _len, _ref, _results;
		_ref = this.respuestas;
		_results = [];
		for (_i = 0, _len = _ref.length; _i < _len; _i++) {
			respuesta = _ref[_i];
			_results.push(console.log(respuesta));
		}
		return _results;
	};

	Pregunta.prototype.indexar = function() {
		var letras, respuesta, _i, _len, _ref, _results;
		letras = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'];
		$("#" + this.id + " .pregunta").html(this.pregunta);
		_ref = this.respuestas;
		_results = [];
		for (_i = 0, _len = _ref.length; _i < _len; _i++) {
			respuesta = _ref[_i];
			_results.push($("#f-" + this.id + " table").append("<tr><td><input name='" + this.id + "' type='radio' value='" + _i + "'></td><td><span class='letra'>" + letras[_i] + ". </span>" + respuesta + "</td></tr>"));
		}
		return _results;
	};

	Pregunta.prototype.checkRespuesta = function(intentos, nota) {
		doLMSSetValue("cmi.interactions." + intentos + ".id", this.id);
		doLMSSetValue("cmi.interactions." + intentos + ".type", this.tipo);
		doLMSSetValue("cmi.interactions." + intentos + ".student_response", $("input[name='" + this.id + "']:checked").val());
		if ($("input[name='" + this.id + "']:checked").val() === this.correcto) {
			nota +=1;
			// console.log("ok!!");
			doLMSSetValue("cmi.interactions." + intentos + ".result", "correct");
		} else {
			doLMSSetValue("cmi.interactions." + intentos + ".result", "wrong");
		}
		// console.log("nota: " + nota );
		return nota;
	};

	return Pregunta;

})();

jQuery(function($) {
	return $(document).on("ready", function() {
		var Q1, Q2, Q3, Q4, Q5;
		
		Q1 = new Pregunta("Q1", "choice", "0", "¿Qué significa la “P” de “PHASE”?", ["Identificar y definir el problema", "Establecer las necesidades", "Definir responsables para solucionar la situación", "Ninguna de las anteriores", "Todas las anteriores"]);
		Q2 = new Pregunta("Q2", "choice", "1", "¿Qué significa la “H” de “PHASE”?", ["Identificar el responsable de la situación", "Identificar y priorizar hipótesis de solución", "Buscar las consecuencias de la situación", "Ninguna de las anteriores", "Todas las anteriores"]);
		Q3 = new Pregunta("Q3", "choice", "0", "¿Qué significa la “A” de “PHASE”?", ["Análisis para aprobar o desaprobar hipótesis", "Generar ideas de cómo se debe solucionar la situación", "Determinar quién va a solucionar la situación", "Ninguna de las anteriores", "Todas las anteriores"]);
		Q4 = new Pregunta("Q4", "choice", "0", "¿Qué significa la “S” de “PHASE”?", ["Evaluar alternativas de solución", "Determinar la causa del problema", "Priorizar las opciones para solucionar la situación", "Ninguna de las anteriores", "Todas las anteriores"]);
		Q5 = new Pregunta("Q5", "choice", "2", "¿Qué significa la “E” de “PHASE”?", ["Desarrollar un plan para mejorar la situación", "Aceptar la situación y esperar a que no vuelva a repetirse", "Explicación y comunicación de planes y resultados", "Ninguna de las anteriores", "Todas las anteriores"]);
		
		Q1.indexar();
		Q2.indexar();
		Q3.indexar();
		Q4.indexar();
		Q5.indexar();
		
		if (status === "completed") {
			$("#evaluacion").css("display", "none");
			$("#listo").css("display", "block");
			$("#cali").html(doLMSGetValue("cmi.core.score.raw"));
			return $("#botonsalir").click(function(e) {
				return terminar();
			});
		} else {
			return $("#botonenviar").click(function(e) {
				var intentos, nota, notmax, status;
				e.preventDefault();
				if ($("input:checked").length < $(".pregunta-container").length) {
					return alert("Debes llenar todos los campos para terminar");
				} else {
					nota = 0;
					notmax = 5;
					intentos = parseInt(doLMSGetValue("cmi.interactions._count"));
					


					nota = Q1.checkRespuesta(intentos, nota);
					intentos++;
					nota = Q2.checkRespuesta(intentos, nota);
					intentos++;
					nota = Q3.checkRespuesta(intentos, nota);
					intentos++;
					nota = Q4.checkRespuesta(intentos, nota);
					intentos++;
					nota = Q5.checkRespuesta(intentos, nota);
					intentos++;
					
					doLMSSetValue("cmi.core.score.raw", nota);
					if (nota < 4) {
						status = "incomplete";
						$("#fallo").css("display", "block");
						$("#evaluacion").css("display", "none");
						$("#cali2").html(nota + "");
					} else {
						status = "completed";
						$("#bien").css("display", "block");
						$("#evaluacion").css("display", "none");
						$("#cali3").html(nota + "");
					}
					doLMSSetValue('cmi.core.lesson_status', status);
					doLMSCommit();
				}
			});
		}
	});
});

